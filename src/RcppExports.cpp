// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fastElemMult
Rcpp::NumericMatrix fastElemMult(Rcpp::NumericMatrix X, Rcpp::NumericMatrix Y);
RcppExport SEXP _GFBioNet_fastElemMult(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(fastElemMult(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// fastScale
Rcpp::NumericMatrix fastScale(Rcpp::NumericMatrix X);
RcppExport SEXP _GFBioNet_fastScale(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(fastScale(X));
    return rcpp_result_gen;
END_RCPP
}
// cor2
arma::mat cor2(const arma::mat& X);
RcppExport SEXP _GFBioNet_cor2(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cor2(X));
    return rcpp_result_gen;
END_RCPP
}
// getcor_fast
Rcpp::DataFrame getcor_fast(const arma::mat& X, const arma::mat& G, const double cor_thresX, const double cor_thresG, const double cor_thresXG, const std::vector<std::string>& xnames, const std::vector<std::string>& gnames);
RcppExport SEXP _GFBioNet_getcor_fast(SEXP XSEXP, SEXP GSEXP, SEXP cor_thresXSEXP, SEXP cor_thresGSEXP, SEXP cor_thresXGSEXP, SEXP xnamesSEXP, SEXP gnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double >::type cor_thresX(cor_thresXSEXP);
    Rcpp::traits::input_parameter< const double >::type cor_thresG(cor_thresGSEXP);
    Rcpp::traits::input_parameter< const double >::type cor_thresXG(cor_thresXGSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type xnames(xnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type gnames(gnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(getcor_fast(X, G, cor_thresX, cor_thresG, cor_thresXG, xnames, gnames));
    return rcpp_result_gen;
END_RCPP
}
// getcor_fast3
Rcpp::List getcor_fast3(const std::vector<int> XG1ind_all, const std::vector<int> XG2ind_all, const int p);
RcppExport SEXP _GFBioNet_getcor_fast3(SEXP XG1ind_allSEXP, SEXP XG2ind_allSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int> >::type XG1ind_all(XG1ind_allSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type XG2ind_all(XG2ind_allSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(getcor_fast3(XG1ind_all, XG2ind_all, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GFBioNet_fastElemMult", (DL_FUNC) &_GFBioNet_fastElemMult, 2},
    {"_GFBioNet_fastScale", (DL_FUNC) &_GFBioNet_fastScale, 1},
    {"_GFBioNet_cor2", (DL_FUNC) &_GFBioNet_cor2, 1},
    {"_GFBioNet_getcor_fast", (DL_FUNC) &_GFBioNet_getcor_fast, 7},
    {"_GFBioNet_getcor_fast3", (DL_FUNC) &_GFBioNet_getcor_fast3, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_GFBioNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
